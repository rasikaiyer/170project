import networkx as nx
import os
from random import shuffle
from collections import defaultdict
import random

###########################################
# Change this variable to the path to 
# the folder containing all three input
# size category folders
###########################################
path_to_inputs = "./all_inputs"

number  = "154"

###########################################
# Change this variable if you want
# your outputs to be put in a 
# different folder
###########################################
path_to_outputs = "./all_outputs"

def parse_input(folder_name):
    '''
        Parses an input and returns the corresponding graph and parameters

        Inputs:
            folder_name - a string representing the path to the input folder

        Outputs:
            (graph, num_buses, size_bus, constraints)
            graph - the graph as a NetworkX object
            num_buses - an integer representing the number of buses you can allocate to
            size_buses - an integer representing the number of students that can fit on a bus
            constraints - a list where each element is a list vertices which represents a single rowdy group
    '''
    graph = nx.read_gml(folder_name + "/graph.gml")
    parameters = open(folder_name + "/parameters.txt")
    num_buses = int(parameters.readline())
    size_bus = int(parameters.readline())
    constraints = []
    
    for line in parameters:
        line = line[1: -2]
        curr_constraint = [num.replace("'", "") for num in line.split(", ")]
        constraints.append(curr_constraint)
    return graph, num_buses, size_bus, constraints


def solve(graph, num_buses, size_bus, constraints):
    students = list(graph.nodes)
    #shuffle(students)

    friendships = list(graph.edges)
    friend_map = defaultdict(list)
    for u, v in friendships:
        friend_map[u].append(v)
        friend_map[v].append(u)
        

    buses = []
    bus_friendships = []
    for i in range(num_buses):
        buses.append([])
        bus_friendships.append(0)

    rowdy_groups = defaultdict(list)
    for c in constraints: 
        for i in c:
            copy = c[:]
            copy.remove(i)
            rowdy_groups[i].append(copy)

    # Randomly selecting a student to put in a bu

    # random_sample = random.sample(students, num_buses)
    # for i in range(num_buses):
    #     buses[i].append(random_sample[i])
    #     students.remove(random_sample[i])

    # Put student with the most friends to a bus

    shuffle(students)
    #students.reverse()

    # friends_map = defaultdict(list)
    # for u, v in friendships:
    #     friends_map[u].append(v)
    #     friends_map[v].append(u)
    # friends_count = [(v, len(friends_map[v])) for v in students]
    # friends_count.sort(reverse = True, key = lambda v: v[1])
    # ordered_students = [v[0] for v in friends_count]
    # for i in range(num_buses):
    #     buses[i].append(ordered_students[i])
    #     students.remove(ordered_students[i])


    for student in students:
        max_friends = float("-inf")
        max_bus = None
        # make the max_bus default be the next empty bus
        for i in range(num_buses):
            if len(buses[i]) == 0:
                max_friends = 0
                max_bus = i
                break

        for i in range(num_buses):
            if len(buses[i]) == size_bus:
                continue
            # check if adding student to bus i will create a rowdy group
            for group in rowdy_groups[student]:
                rowdy = all(elem in buses[i] for elem in group)
                if rowdy:
                    continue
            # counting number of friendships generated by adding student to each bus
            count = 0
            for s in buses[i]:
                if s in friend_map[student]:
                    count += 1
            total = count
            if total > max_friends:
                max_friends = total
                max_bus = i
    # add student to bus that will generate max friendships
        buses[max_bus].append(student)
        bus_friendships[max_bus] += total

    output = ""
    for i in range(num_buses):
        output += str(buses[i]) + '\n'
    return output

def main():
    '''
        Main method which iterates over all inputs and calls `solve` on each.
        The student should modify `solve` to return their solution and modify
        the portion which writes it to a file to make sure their output is
        formatted correctly.
    '''
    size_categories = ["medium"]
    if not os.path.isdir(path_to_outputs):
        os.mkdir(path_to_outputs)

    for size in size_categories:
        category_path = path_to_inputs + "/" + size + "/" + number
        output_category_path = path_to_outputs + "/" + size + "/" + number
        category_dir = os.fsencode(category_path)

        for input_folder in os.listdir(category_dir):
            input_name = os.fsdecode(input_folder)
            graph, num_buses, size_bus, constraints = parse_input(category_path)
            solution = solve(graph, num_buses, size_bus, constraints)
            output_file = open(output_category_path + ".out", "w") 
            output_file.write(solution)

            output_file.close()

if __name__ == '__main__':
    main()
